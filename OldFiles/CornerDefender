package nl.saxion;

import robocode.HitWallEvent;
import robocode.MessageEvent;
import robocode.ScannedRobotEvent;
import robocode.TeamRobot;
import java.awt.*;
import java.io.IOException;
import static robocode.util.Utils.normalRelativeAngleDegrees;

public class CornerDefender extends TeamRobot {

    private static final double PERCENTAGEBATTLEFIELD = 0.20;
    private static final int DISTANCEFROMWALL = 50;

    private int moveDirection = 1; // 1 = forward, -1 = backwards
    private int id;
    private int readyInt = 0;

    public void run() {
        setDefenderColor();

        getID();
        if(id == 1){
            // left CornerDefender
            goCornerLeft();
            setTurnLeft(45);
        }else if(id == 2){
            // right CornerDefender
            goCornerRight();
            setTurnRight(45);
        }

        while (true) {
            sendAliveMessage();
            doStrafing();
            setTurnRadarRight(360); // scan until you find your first enemy
            execute();
        }
    }

    /*
                               +--------------------------------+
            +------------------+           Movement             +------------------+
                               +--------------------------------+
     */

    /**
     * @author William
     */
    public void goCornerRight() {
        double dynamicWidth;
        turnLeft(getHeading() - 180);

        setAhead(getY() - DISTANCEFROMWALL);
        while (getDistanceRemaining() > 0) {
            execute();
        }

        turnRight(90);

        dynamicWidth = (getBattleFieldWidth() * PERCENTAGEBATTLEFIELD);

        setAhead(getX() - getWidth() - dynamicWidth);
        while (getDistanceRemaining() > 0) {
            execute();
        }
    }

    /**
     * @Author Olivier
     */
    private void goCornerLeft() {
        if (getHeading() > 270) {
            double turnDegrees = -270 + getHeading();
            turnLeft(turnDegrees);

        } else if (getHeading() < 270) {
            double turnDegrees = (270.0 - getHeading());
            turnRight(turnDegrees);

        }

        ahead(getX() - DISTANCEFROMWALL);
        turnLeft(90);

        double percentage = getBattleFieldHeight() * PERCENTAGEBATTLEFIELD;
        double distance = getY() - percentage;

        ahead(distance);

    }

    /**
     * @author Yaolee
     */
    public void doStrafing() {
        // strafe by changing direction every 25 ticks
        if (getTime() % 25 == 0) {
            setMaxVelocity(3);
            moveDirection *= -1;
            setAhead(200 * moveDirection);
        }
    }

    /**
     * @author Yaolee
     */
    public void reverseDirection() {
        if (moveDirection == 1) {
            setBack(10000);
        } else {
            setAhead(10000);
        }
    }

    /*
                               +--------------------------------+
            +------------------+          Utilities             +------------------+
                               +--------------------------------+
     */

    /**
     * @author Olivier
     */
    private void getID(){
         String name = getName();
        if(!name.contains("(")){
            id = 1;
        }else{
            String requiredString = name.substring(name.indexOf("(") + 1, name.indexOf(")"));
            id = Integer.parseInt(requiredString);
        }
    }

    /**
     * @author William
     */
    private void setDefenderColor() {
        setBodyColor(new Color(0, 0, 0));
        setGunColor(new Color(255, 0, 0));
        setRadarColor(new Color(0, 0, 0));
        setBulletColor(new Color(255, 0, 0));
        setScanColor(new Color(0, 0, 0));
    }

    public void sendAliveMessage() {
        if (getTime() % 60 == 0) {
            try {
                broadcastMessage("alive");
            } catch (IOException ignored) { }
        }
    }

    /*
                               +--------------------------------+
            +------------------+             Events             +------------------+
                               +--------------------------------+
     */

    @Override
    public void onMessageReceived(MessageEvent event) {
        super.onMessageReceived(event);
        if(event.getMessage() instanceof String){
            String message = (String) event.getMessage();

            if(message.equals("READY")){
                readyInt++;

                if(readyInt == 2){
                    if(id == 1){
                       // goCornerLeft();
                    }else if(id == 2){
                       // goCornerRight();
                    }
                }

            }else if(message.equals("CD-OUT")){
                System.out.println("KAY");
            }
        }
    }

    /**
     * @author Yaolee
     */
    @Override
    public void onScannedRobot(ScannedRobotEvent e) {
        // Calculate exact location of the robot
        double absoluteBearing = getHeading() + e.getBearing();
        double bearingFromGun = normalRelativeAngleDegrees(absoluteBearing - getGunHeading());
        double bearingFromRadar = normalRelativeAngleDegrees(absoluteBearing - getRadarHeading());

        if(!isTeammate(e.getName())) {
            // If it's close enough, fire!
            if (Math.abs(bearingFromGun) <= 3) {
                setTurnGunRight(bearingFromGun);
                setTurnRadarRight(bearingFromRadar); // keep the radar focused on the enemy

                if (getGunHeat() == 0 && getEnergy() > .2) {
                    // never fires a bullet bigger than 3, just flooring the value to be safe
                    setFire(Math.min(400 / e.getDistance(), 3));
                }
            } else {
                setTurnGunRight(bearingFromGun);
                setTurnRadarRight(bearingFromRadar);
            }

            if (bearingFromGun == 0) {
                scan();
            }
        }
    }

    /**
     * @author Yaolee
     */
    @Override
    public void onHitWall(HitWallEvent e) {
        reverseDirection();
    }
    
    @Override
    public void onHitRobot(HitRobotEvent event) {
        super.onHitRobot(event);

        if(isTeammate(event.getName())){
            clearAllEvents();
            ahead(-40);
            if(id == 1){
                getReadyLeft();
            }else if(id == 2){
                getReadyRight();
            }
        }
    }
}


