package nl.saxion;

import robocode.*;
import java.awt.*;
import java.io.IOException;
import static robocode.util.Utils.normalRelativeAngleDegrees;

public class SharkBot extends TeamRobot {

    private static final Color BODY_COLOR = new Color(255, 68, 67);
    private static final Color GUN_COLOR = new Color(245, 125, 134);
    private static final Color RADAR_COLOR = new Color(60, 60, 60);
    private static final Color BULLET_COLOR = new Color(140, 255, 66);
    private static final Color SCAN_COLOR = new Color(216, 255, 243);
    private static final int DISTANCE = 100;

    private Movement movement;

    private boolean inWall;
    private boolean inTeammate = true;
    private double locationX = 0, locationY = 0;

    /**
     * Standard run method, which gets called when robot spawns.
     */
    public void run() {
        Utilities.setRobotColor(this, BODY_COLOR, GUN_COLOR, RADAR_COLOR, BULLET_COLOR, SCAN_COLOR);

        movement = new Movement(this);

        if (getX() <= 50 || getY() <= 50 || getBattleFieldWidth() - getX() <= 50 || getBattleFieldHeight() - getY() <= 50) {
            inWall = true;
        } else {
            inWall = false;
        }
        setAhead(10000);
        setTurnRadarRight(360); // Scan until you find your first enemy

        while (true) {
            try {
                broadcastMessage("Location:" + getX() + ":" + getY());
            } catch (IOException e) {
                e.printStackTrace();
            }

            nearTeammateCheck();
            nearWallCheck();

            if (getRadarTurnRemaining() == 0.0) {
                setTurnRadarRight(360);
            }
            execute();
        }
    }

    /*
                               +--------------------------------+
            +------------------+   Robot Movement & Utilities   +------------------+
                               +--------------------------------+
     */

    /**
     * Checks if other teammates are nearby and reverses if so.
     *
     * @author Mike
     */
    private void nearTeammateCheck() {
        if ((getX() - locationX > DISTANCE || getX() - locationX < -DISTANCE || getY() - locationY > DISTANCE || getY() - locationY < -DISTANCE) && !inTeammate) {
            inTeammate = true;
        }
        if (getX() - locationX < DISTANCE && getX() - locationX > -DISTANCE && getY() - locationY < DISTANCE && getY() - locationY > -DISTANCE && inTeammate) {

            inTeammate = false;
            movement.reverseSharkDirection();
        }
    }

    /**
     * Checks if walls are nearby and reverses if so
     *
     * @author Mike
     */
    private void nearWallCheck() {
        if (getX() > 50 && getY() > 50 && getBattleFieldWidth() - getX() > 50 && getBattleFieldHeight() - getY() > 50 && !inWall) {
            inWall = false;
        }
        if (getX() <= 50 || getY() <= 50 || getBattleFieldWidth() - getX() <= 50 || getBattleFieldHeight() - getY() <= 50) {
            if (!inWall) {
                movement.reverseSharkDirection();
                inWall = true;
            }
        }
    }

    /**
     * Lets the robot shoot at a target.
     *
     * @param event ScannedRobotEvent event.
     * @author Yao Lee, William
     */
    private void firingMechanicShark(ScannedRobotEvent event) {
        double absoluteBearing = getHeading() + event.getBearing();
        double bearingFromGun = normalRelativeAngleDegrees(absoluteBearing - getGunHeading());
        double bearingFromRadar = normalRelativeAngleDegrees(absoluteBearing - getRadarHeading());

        if (movement.sharkBotIsMovingForward()) {
            setTurnRight(normalRelativeAngleDegrees(event.getBearing() + 80));
        } else {
            setTurnRight(normalRelativeAngleDegrees(event.getBearing() + 100));
        }
        if (Math.abs(bearingFromGun) <= 3) {
            setTurnGunRight(bearingFromGun);
            setTurnRadarRight(bearingFromRadar); // Keep the radar focused on the enemy

            if (getGunHeat() == 0 && getEnergy() > .2) {
                // Never fires a bullet with a power bigger than 3
                // Fires a bullet with at least a power of 2
                setFire(Math.min((400 / event.getDistance()) + 2, 3));
            }
        } else {
            setTurnGunRight(bearingFromGun);
            setTurnRadarRight(bearingFromRadar);
        }

        if (bearingFromGun == 0) {
            scan();
        }
    }

    /*
                               +--------------------------------+
            +------------------+          Robot Events          +------------------+
                               +--------------------------------+
     */

    /**
     * Handles the targeting system with messaging.
     *
     * @param event MessageEvent event.
     * @author Mike, Olivier, William
     */
    public void onMessageReceived(MessageEvent event) {
        if (event.getMessage() instanceof String) {
            String message = (String) event.getMessage();
            if (message.contains("Location:")) {
                String info = message.substring(9);
                locationX = Double.parseDouble(info.substring(0, info.indexOf(":")));
                locationY = Double.parseDouble(info.substring(info.indexOf(":") + 1, info.length()));
            }
        }
    }

    /**
     * Reverses direction if the robot hits a wall.
     *
     * @param event HitWallEvent event.
     * @author Yao Lee
     */
    public void onHitWall(HitWallEvent event) {
        movement.reverseSharkDirection();
    }

    /**
     * Starts shooting if the scanned robot isn't a teammate.
     *
     * @param event ScannedRobotEvent event.
     * @author Mike, Olivier, William
     */
    public void onScannedRobot(ScannedRobotEvent event) {
        if (!isTeammate(event.getName())) {
            firingMechanicShark(event);
        }
    }

    /**
     * Reverses direction if it's the fault of the robot.
     *
     * @param event HitRobotEvent event.
     * @author Yao Lee
     */
    public void onHitRobot(HitRobotEvent event) {
        if (event.isMyFault()) {
            movement.reverseSharkDirection();
        }
    }
}
