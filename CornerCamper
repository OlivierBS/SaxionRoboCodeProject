package nl.saxion;

import robocode.MessageEvent;
import robocode.ScannedRobotEvent;
import robocode.TeamRobot;
import java.awt.*;
import java.io.IOException;

public class CornerCamper extends TeamRobot {

    private static final double RIGHTTARGETX = 65.0;
    private static final double RIGHTTARGETY = 25.0;
    private static final double LEFTARGETX = 25.0;
    private static final double LEFTTARGETY = 65.0;

    private int id;
    private int readyInt = 0;

    public void run(){

        setDefenderColor();
        getID();

        if(id == 1){
            goLeftCorner();
        }else if(id == 2){
            goToRightCorner();
        }
        
        while (true) {
            if (getGunHeat() == 0 && getEnergy() > .2) {
            setFire(1);
            }
            execute();
        }
    }

    /*
                               +--------------------------------+
            +------------------+           Movement             +------------------+
                               +--------------------------------+
     */

    /**
     * @author Olivier
     */
    private void goToRightCorner(){

        double angle = getAngle(RIGHTTARGETX,RIGHTTARGETY);
        double turnDegrees = -angle + getHeading();

        turnLeft(turnDegrees);

        while(Math.ceil(getX()) != RIGHTTARGETX ){
            double distance = Math.hypot(getX()-RIGHTTARGETX,getY()-RIGHTTARGETY);
            ahead(distance);
        }

        double turnGunDegrees = -45 + getGunHeading();
        turnLeft(turnGunDegrees);

        try {
            broadcastMessage(getName() +" READY");
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    /**
     * @author Olivier
     */
    private void goLeftCorner(){

        double angle = getAngle(LEFTARGETX,LEFTTARGETY);
        double turnDegrees = -angle + getHeading();

        turnLeft(turnDegrees);

        while(Math.ceil(getX()) != LEFTARGETX ){
            double distance = Math.hypot(getX()-LEFTARGETX,getY()-LEFTTARGETY);
            ahead(distance);
        }

        double turnGunDegrees = -45 + getGunHeading();
        turnLeft(turnGunDegrees);
    }

    /*
                               +--------------------------------+
            +------------------+          Utilities             +------------------+
                               +--------------------------------+
     */

    /**
     * @author Olivier
     */
    private void getID(){
        String name = getName();
        if(!name.contains("(")){
            id = 1;
        }else{
            String requiredString = name.substring(name.indexOf("(") + 1, name.indexOf(")"));
            id = Integer.parseInt(requiredString);
        }
    }

    /**
     * @author William
     */
    private void setDefenderColor() {
        setBodyColor(new Color(0, 0, 0));
        setGunColor(new Color(255, 0, 0));
        setRadarColor(new Color(0, 0, 0));
        setBulletColor(new Color(255, 0, 0));
        setScanColor(new Color(0, 0, 0));
    }

    /**
     * @author Olivier
     */
    private double getAngle(double targetX, double targetY) {
        double angle = Math.toDegrees(Math.atan2( targetX - getX(), targetY - getY()));

        if(angle < 0){
            angle += 360.0;
        }
        return angle;
    }

    /*
                               +--------------------------------+
            +------------------+             Events             +------------------+
                               +--------------------------------+
     */

    @Override
    public void onMessageReceived(MessageEvent event) {
        if(event.getMessage() instanceof String){
         String message = (String) event.getMessage();

        }
    }

    @Override
    public void onScannedRobot(ScannedRobotEvent event) {
        super.onScannedRobot(event);

        if(!isTeammate(event.getName())) {
            try {
                broadcastMessage("CD-OUT");
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }
    
       @Override
    public void onRobotDeath(RobotDeathEvent event) {
        super.onRobotDeath(event);
        if (isTeammate(event.getName())) {
            String requiredString = event.getName().substring(event.getName().indexOf("(") + 1, event.getName().indexOf(")"));

            int idS = Integer.parseInt(requiredString);

            if (idS == 1) {
                System.out.println("Corner Defender " + idS + " is dead!");
            } else if (idS == 2) {
                System.out.println("Corner Defender " + idS + " is dead!");
            }

        }
    }
    
        @Override
    public void onHitRobot(HitRobotEvent event) {
        super.onHitRobot(event);

        if(isTeammate(event.getName())){
            clearAllEvents();
            ahead(-10);
            if(id == 1){
                goLeftCorner();
            }else if(id == 2){
                goToRightCorner();
            }
        }
    }
}
